namespace Main{    open Microsoft.Quantum.Intrinsic   as Intrinsic;    open Microsoft.Quantum.Convert     as Convert;    open Microsoft.Quantum.Measurement as Measurement;        operation Sample(iterations : Int, basis : Pauli, op: (Pauli => Result)) : Int {        // codeauthor:: Wilfried Mercier - LAM        // Performs sampling of a qubit in a given Pauli basis after applying a given measurement operation.        //        // :param Int iterations: number of sampling points        // :param Pauli basis: Pauli basis to perform the measurement on        // :param op: measurement operation taking a Pauli basis and returning a measurement Result        //        // :returns: number of sample points measured as One        // :rtype: Int              mutable total  = 0;        for idx in 1.. iterations {            let result = op(basis);            set total += result == One ? 1 | 0;            }            return total;    }        operation SetAndMeasureQubit(basis : Pauli) : Result {        // codeauthor:: Wilfried Mercier - LAM        // Safely set, measure, and release a Qubit in a given basis        //        // :param Pauli basis: basis to perform the measurement on        //        // :returns: result of the measurement        // :rtype: Result                // Note: by default Qubits are allocated to |0>        use qubit  = Qubit();        let result = Intrinsic.Measure([basis], [qubit]);        Intrinsic.Reset(qubit);                return result;    }        operation SetAndMeasureQubits(nqubits: Int, basis : Pauli) : Result[] {        // codeauthor:: Wilfried Mercier - LAM        // Safely set, measure, and release nqubits Qubits in a given basis        //        // :param Int nqubits: number of qubits to use        // :param Pauli basis: basis to perform the measurement on        //        // :returns: result of the measurement        // :rtype: Result                // Note: by default Qubits are allocated to |0>        use qubits = Qubit[nqubits];                // Define array of bases -> same base for all measurements here        let bases  = [basis, size=nqubits];                // Measure each qubit        let result = Measurement.MeasurePaulis(bases, qubits, Intrinsic.Measure);                Intrinsic.ResetAll(qubits);                return result;    }        @EntryPoint()    operation Run(): Unit {        // Entry point to test the various operations                let nsample       = 1000;        let nsample_float = Convert.IntAsDouble(nsample);                Intrinsic.Message("Using Z Pauli basis:");                let resultZ       = Convert.IntAsDouble(Sample(nsample, PauliZ, SetAndMeasureQubit));        Intrinsic.Message($"Probability of |1> = {resultZ/nsample_float*100.0}%");        Intrinsic.Message($"Probability of |0> = {(1.0 - resultZ/nsample_float)*100.0}%");                Intrinsic.Message("Using X Pauli basis:");                let resultX       = Convert.IntAsDouble(Sample(nsample, PauliX, SetAndMeasureQubit));        Intrinsic.Message($"Probability of |1> = {resultX/nsample_float*100.0}%");        Intrinsic.Message($"Probability of |0> = {(1.0 - resultX/nsample_float)*100.0}%");                mutable result5   = SetAndMeasureQubits(5, PauliZ);        Intrinsic.Message($"Measure for multiple qubits is {result5} in PauliZ");                set result5       = SetAndMeasureQubits(5, PauliX);        Intrinsic.Message($"Measure for multiple qubits is {result5} in PauliX");            }}