namespace Main{    open Microsoft.Quantum.Intrinsic;        operation Sample(iterations : Int, basis : Pauli, op: (Pauli => Result)) : Unit {              mutable runningTotal = 0;        for idx in 1.. iterations {            let result = op(basis);            set runningTotal += result == One ? 1 | 0;            }            Message($"Measurement results:");        Message($"|0>: {iterations - runningTotal}");        Message($"|1>:{runningTotal}");    }        operation MeasureDefaultQubit(basis : Pauli) : Result {        use qubit  = Qubit();        let result = Measure([basis], [qubit]);        Reset(qubit);        return result;    }        @EntryPoint()    operation Run(): Unit {                Message("Using Z Pauli basis:");        Sample(1000, PauliZ, MeasureDefaultQubit);                Message("Using X Pauli basis:");        Sample(1000, PauliX, MeasureDefaultQubit);    }}